#!/bin/bash
#
# Copyright (C) 2015, 2016 Canonical Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. $SNAP/bin/config-internal.sh

set_item() {
	if [ -z "$1" ] || [ -z "$2" ] ; then
		echo "ERROR: You need to provide a key and a value to set"
		exit 1
	fi
	case $1 in
		disabled)
			DISABLED=$2
			if [ "$DISABLED" == "0" ] ; then
				echo "You have successfully enabled the access point but you still"
				echo "need to either reboot the device or restart the systemd"
				echo "service to make the service reloading its configuration."
				echo "You can just run the following command (as root) if you"
				echo "do not want to reboot your device:"
				echo
				echo " $ systemctl restart snap.wifi-ap.backend"
			fi
			;;
		debug)
			DEBUG=$2
			;;
		wifi.interface)
			WIFI_INTERFACE=$2
			;;
		wifi.address)
			WIFI_ADDRESS=$2
			;;
		wifi.netmask)
			WIFI_NETMASK=$2
			;;
		wifi.interface-mode)
			WIFI_INTERFACE_MODE=$2
			;;
		wifi.hostapd-driver)
			WIFI_HOSTAPD_DRIVER=$2
			if [ "$WIFI_HOSTAPD_DRIVER" == "rtl8188" ] ; then
				# Select correct mode for the rtl8188 driver
				WIFI_INTERFACE_MODE=direct
			fi
			;;
		wifi.ssid)
			WIFI_SSID=$2
			;;
		wifi.security)
			WIFI_SECURITY=$2
			;;
		wifi.security-passphrase)
			WIFI_SECURITY_PASSPHRASE=$2
			;;
		wifi.channel)
			WIFI_CHANNEL=$2
			;;
		wifi.operation-mode)
			WIFI_OPERATION_MODE=$2
			;;
		share.network-interface)
			SHARE_NETWORK_INTERFACE=$2
			;;
		dhcp.range-start)
			DHCP_RANGE_START=$2
			;;
		dhcp.range-stop)
			DHCP_RANGE_STOP=$2
			;;
		dhcp.lease-time)
			DHCP_LEASE_TIME=$2
			;;
		*)
			echo "ERROR: Unknown config item '$1'"
			exit 1
	esac
}

get_item() {
	case $1 in
		disabled)
			echo $DISABLED
			;;
		debug)
			echo $DEBUG
			;;
		wifi.interface)
			echo $WIFI_INTERFACE
			;;
		wifi.address)
			echo $WIFI_ADDRESS
			;;
		wifi.netmask)
			echo $WIFI_NETMASK
			;;
		wifi.interface-mode)
			echo $WIFI_INTERFACE_MODE
			;;
		wifi.hostapd-driver)
			echo $WIFI_HOSTAPD_DRIVER
			;;
		wifi.ssid)
			echo $WIFI_SSID
			;;
		wifi.security)
			echo $WIFI_SECURITY
			;;
		wifi.security-passphrase)
			echo $WIFI_SECURITY_PASSPHRASE
			;;
		wifi.channel)
			echo $WIFI_CHANNEL
			;;
		wifi.operation-mode)
			echo $WIFI_OPERATION_MODE
			;;
		share.network-interface)
			echo $SHARE_NETWORK_INTERFACE
			;;
		dhcp.range-start)
			echo $DHCP_RANGE_START
			;;
		dhcp.range-stop)
			echo $DHCP_RANGE_STOP
			;;
		dhcp.lease-time)
			echo $DHCP_LEASE_TIME
			;;
		*)
			echo "Unknown config item '$1'"
			exit 1
	esac
}

dump_config() {
	echo "disabled: $DISABLED"
	echo "debug: $DEBUG"
	echo "wifi.interface: $WIFI_INTERFACE"
	echo "wifi.address: $WIFI_ADDRESS"
	echo "wifi.netmask: $WIFI_NETMASK"
	echo "wifi.interface-mode: $WIFI_INTERFACE_MODE"
	echo "wifi.hostapd-driver: $WIFI_HOSTAPD_DRIVER"
	echo "wifi.ssid: $WIFI_SSID"
	echo "wifi.security: $WIFI_SECURITY"
	echo "wifi.security-passphrase: $WIFI_SECURITY_PASSPHRASE"
	echo "wifi.channel: $WIFI_CHANNEL"
	echo "wifi.operation-mode: $WIFI_OPERATION_MODE"
	echo "share.network-interface: $SHARE_NETWORK_INTERFACE"
	echo "dhcp.range-start: $DHCP_RANGE_START"
	echo "dhcp.range-stop: $DHCP_RANGE_STOP"
	echo "dhcp.lease-time: $DHCP_LEASE_TIME"
}

write_configuration() {
	cat <<-EOF > $SNAP_DATA/config
	#!/bin/bash
	# THIS FILE IS AUTOGENERATED. Please use the the wifi-ap.config
	# command to change the configuration or create a overlay
	# configuration file at $SNAP_USER_DATA/config
	DISABLED=$DISABLED
	DEBUG=$DEBUG
	WIFI_INTERFACE=$WIFI_INTERFACE
	WIFI_ADDRESS=$WIFI_ADDRESS
	WIFI_NETMASK=$WIFI_NETMASK
	WIFI_INTERFACE_MODE=$WIFI_INTERFACE_MODE
	WIFI_HOSTAPD_DRIVER=$WIFI_HOSTAPD_DRIVER
	WIFI_SSID=$WIFI_SSID
	WIFI_SECURITY=$WIFI_SECURITY
	WIFI_SECURITY_PASSPHRASE=$WIFI_SECURITY_PASSPHRASE
	WIFI_CHANNEL=$WIFI_CHANNEL
	WIFI_OPERATION_MODE=$WIFI_OPERATION_MODE
	SHARE_NETWORK_INTERFACE=$SHARE_NETWORK_INTERFACE
	DHCP_RANGE_START=$DHCP_RANGE_START
	DHCP_RANGE_STOP=$DHCP_RANGE_STOP
	DHCP_LEASE_TIME=$DHCP_LEASE_TIME
	EOF
}

if [ -z "$1" ] ; then
	echo "Usage: $0 get|set <key> [<value>]"
	exit
fi



case "$1" in
	set)
		if [ "$(id -u)" != "0" ] ; then
			echo "ERROR: '$@' needs to be executed as root!"
			exit 1
		fi
		shift
		key=$1
		shift
		value=$1
		shift
		set_item $key $value
		write_configuration
		;;
	get)
		shift
		if [ "$1" == "" ] ; then
			dump_config
		else
			echo "$1: $(get_item $1)"
		fi
		shift
		;;
	*)
		echo "Unknown command '$1'."
		exit 1
		;;
esac
